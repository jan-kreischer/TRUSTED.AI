{
    "general": {
        "model_name": "Decision Tree Classifier 01",
        "purpose_description": "Improved feature selection with a simple model",
        "domain_description": "IT security",
        "training_data_description": "Alberto's IoT Raspery Pie Data Set",
        "model_information": "The model is derived from Alberto Huertas Random Forest Classifier",
        "target_column": "label",
        "authors": "Joel Leupp",
        "contact_information": "joel.leupp@uzh.ch",
        "description": "Preprocess data and drop all highly correlated features and use a simple explainable decision tree"
    },
    "fairness": {
        "protected_feature": "connectivity",
        "protected_values": [
            0
        ],
        "favorable_outcomes": [
            13
        ]
    },
    "accountability": {
        "regularization": "Other"
    },
    "scores": {
        "fairness": {
            "underfitting": 2,
            "overfitting": NaN,
            "statistical_parity_difference": 1,
            "equal_opportunity_difference": 1,
            "average_odds_difference": 1,
            "disparate_impact": 5,
            "class_balance": 5
        },
        "explainability": {
            "algorithm_class": 5,
            "correlated_features": 5,
            "model_size": 3,
            "feature_relevance": 3
        },
        "robustness": {
            "confidence_score": 5,
            "clique_method": NaN,
            "loss_sensitivity": NaN,
            "clever_score": NaN,
            "er_fast_gradient_attack": NaN,
            "er_carlini_wagner_attack": NaN,
            "er_deepfool_attack": NaN
        },
        "accountability": {
            "normalization": 1,
            "missing_data": 5,
            "regularization": 3,
            "train_test_split": 3,
            "factsheet_completeness": 5
        }
    },
    "properties": {
        "fairness": {
            "underfitting": {
                "Metric Description": "Compares the models achieved test accuracy against a baseline.",
                "Depends on": "Model, Test Data",
                "Test Accuracy": "84.83%",
                "Conclusion": "Model is underfitting",
                "Score": "2"
            },
            "overfitting": {
                "Non computable because": "The test accuracy is to low and if the model is underfitting to much it can't be overfitting at the same time."
            },
            "statistical_parity_difference": {
                "Metric Description": "The spread between the percentage of observations from the majority group receiving a favorable outcome compared to the protected group. The closes this spread is to zero the better.",
                "Depends on": "Training Data, Factsheet (Definition of Protected Group and Favorable Outcome)",
                "----------": "",
                "|{x|x is protected, y_true is favorable}|": 13,
                "|{x|x is protected}|": 24,
                "Favored Protected Group Ratio": "P(y_true is favorable|protected=True) = 54.17%",
                "|{x|x is not protected, y_true is favorable}|": 293,
                "|{x|x is not protected}|": 3748,
                "Favored Unprotected Group Ratio": "P(y_true is favorable|protected=False) = 7.82%",
                "-----------": "",
                "Formula": "Statistical Parity Difference = |Favored Protected Group Ratio - Favored Unprotected Group Ratio|",
                "Statistical Parity Difference": "46.35%",
                "Score": "1"
            },
            "equal_opportunity_difference": {
                "Metric Description": "Difference in true positive rates between protected and unprotected group.",
                "Depends on": "Model, Test Data, Factsheet (Definition of Protected Group and Favorable Outcome)",
                "----------": "",
                "|{x|x is protected, y_true is favorable, y_pred is favorable}|": 1,
                "|{x|x is protected, y_true is favorable}|": 1,
                "TPR Protected Group": "P(y_pred is favorable|y_true is favorable, protected=True) = 100.00%",
                "|{x|x is not protected, y_true is favorable, y_pred is favorable}|": 24,
                "|{x|x is not protected, y_true is favorable}|": 54,
                "TPR Unprotected Group": "P(y_pred is favorable|y_true is favorable, protected=False) = 44.44%",
                "-----------": "",
                "Formula": "Equal Opportunity Difference = |TPR Protected Group - TPR Unprotected Group|",
                "Equal Opportunity Difference": "55.56%",
                "Score": "1"
            },
            "average_odds_difference": {
                "Metric Description": "Is the average of difference in false positive rates and true positive rates between the protected and unprotected group",
                "Depends on": "Model, Test Data, Factsheet (Definition of Protected Group and Favorable Outcome)",
                "----------": "",
                "|{x|x is protected, y_true is unfavorable, y_pred is favorable}|": 0,
                "|{x|x is protected, y_true is Unfavorable}|": 1,
                "FPR Protected Group": "P(y_pred is favorable|y_true is unfavorable, protected=True) = 0.00%",
                "|{x|x is not protected, y_true is unfavorable, y_pred is favorable}|": 17,
                "|{x|x is not protected, y_true is unfavorable}|": 610,
                "FPR Unprotected Group": "P(y_pred is favorable|y_true is unfavorable, protected=False) = 2.79%",
                "|{x|x is protected, y_true is favorable, y_pred is favorable}|": 1,
                "|{x|x is protected, y_true is favorable}|": 1,
                "TPR Protected Group": "P(y_pred is favorable|y_true is favorable, protected=True) = 100.00%",
                "|{x|x is not protected, y_true is favorable, y_pred is favorable}|": 24,
                "|{x|x is not protected, y_true is favorable}|": 54,
                "TPR Unprotected Group": "P(y_pred is favorable|y_true is favorable, protected=False) = 44.44%",
                "-----------": "",
                "Formula": "Average Odds Difference = |0.5*(TPR Protected - TPR Unprotected) + 0.5*(FPR Protected - FPR Unprotected)|",
                "Average Odds Difference": "26.38%",
                "Score": "1"
            },
            "disparate_impact": {
                "Metric Description": "Is quotient of the ratio of samples from the protected group receiving a favorable prediction divided by the ratio of samples from the unprotected group receiving a favorable prediction",
                "Depends on": "Model, Test Data, Factsheet (Definition of Protected Group and Favorable Outcome)",
                "----------": "",
                "|{x|x is protected, y_pred is favorable}": 1,
                "|{x|x is protected}|": 2,
                "Protected Favored Ratio": "P(y_hat=favorable|protected=True) = 50.00%",
                "|{x|x is not protected, y_pred is favorable}|": 41,
                "|{x|x is not protected}|": 664,
                "Unprotected Favored Ratio": "P(y_hat=favorable|protected=False) = 6.17%",
                "-----------": "",
                "Formula": "Disparate Impact = Protected Favored Ratio / Unprotected Favored Ratio",
                "Disparate Impact": "8.10",
                "Score": "5"
            },
            "class_balance": {
                "Metric Description": "Measures how well the training data is balanced or unbalanced",
                "Depends on": "Training Data",
                "Score": "5"
            }
        },
        "explainability": {
            "algorithm_class": {
                "dep": [
                    "Depends on",
                    "Model"
                ],
                "clf_name": [
                    "model type",
                    "DecisionTreeClassifier"
                ]
            },
            "correlated_features": {
                "dep": [
                    "Depends on",
                    "Training Data"
                ],
                "pct_drop": [
                    "Percentage of highly correlated features",
                    "0.00%"
                ]
            },
            "model_size": {
                "dep": [
                    "Depends on",
                    "Training Data"
                ],
                "n_features": [
                    "number of features",
                    44
                ]
            },
            "feature_relevance": {
                "dep": [
                    "Depends on",
                    "Training Data and Model"
                ],
                "n_outliers": [
                    "number of outliers in the importance distribution",
                    9
                ],
                "pct_dist": [
                    "percentage of feature that make up over 60% of all features importance",
                    "13.64%"
                ],
                "importance": [
                    "feature importance",
                    {
                        "value": [
                            0.17618179421543764,
                            0.10070572209220893,
                            0.0869863395801756,
                            0.07935558911270961,
                            0.0778172216475362,
                            0.0671856182896192,
                            0.0641526733111482,
                            0.05653149377015245,
                            0.05571124592976878,
                            0.034351232423520714,
                            0.023543231578255195,
                            0.01797779927109405,
                            0.016650441403194893,
                            0.012525479933452046,
                            0.012076998779553226,
                            0.011707786002426787,
                            0.011123337648631165,
                            0.010331550023806212,
                            0.010254223193613746,
                            0.010131299315547885,
                            0.008610867363547561,
                            0.00859364459539031,
                            0.005484983843184076,
                            0.005346261639904851,
                            0.004426011499013801,
                            0.0035563911634333774,
                            0.0031260511740505235,
                            0.003086424635614823,
                            0.0030214495700196203,
                            0.0028908753534546278,
                            0.0028151275444845136,
                            0.002739890194933407,
                            0.002527346611590874,
                            0.0024917697232659203,
                            0.001941991854377453,
                            0.0012425326213340597,
                            0.0011709114971952242,
                            0.0009942861981811603,
                            0.00038078422673015413,
                            0.0002513211684410251,
                            0.0,
                            0.0,
                            0.0,
                            0.0
                        ],
                        "labels": [
                            "fib:fib_table_lookup",
                            "qdisc:qdisc_dequeue",
                            "skb:kfree_skb",
                            "random:urandom_read",
                            "skb:skb_copy_datagram_iovec",
                            "kmem:kfree",
                            "skb:consume_skb",
                            "cs",
                            "ipi:ipi_raise",
                            "tcp:tcp_probe",
                            "block:block_dirty_buffer",
                            "timer:timer_start",
                            "pagemap:mm_lru_insertion",
                            "writeback:wbc_writepage",
                            "clk:clk_set_rate",
                            "cpu-migrations",
                            "kmem:mm_page_alloc_zone_locked",
                            "writeback:writeback_dirty_inode",
                            "irq:softirq_entry",
                            "kmem:mm_page_free",
                            "seconds",
                            "kmem:mm_page_alloc",
                            "writeback:writeback_write_inode",
                            "mmc:mmc_request_start",
                            "kmem:kmem_cache_alloc",
                            "page-faults",
                            "kmem:mm_page_pcpu_drain",
                            "random:get_random_bytes",
                            "workqueue:workqueue_activate_work",
                            "rpm:rpm_resume",
                            "writeback:sb_clear_inode_writeback",
                            "writeback:global_dirty_state",
                            "block:block_getrq",
                            "writeback:writeback_dirty_inode_enqueue",
                            "rpm:rpm_suspend",
                            "writeback:writeback_single_inode",
                            "block:block_unplug",
                            "filemap:mm_filemap_add_to_page_cache",
                            "sock:inet_sock_set_state",
                            "writeback:writeback_written",
                            "jbd2:jbd2_start_commit",
                            "writeback:writeback_pages_written",
                            "block:block_bio_backmerge",
                            "connectivity"
                        ]
                    }
                ]
            }
        },
        "robustness": {
            "confidence_score": {
                "confidence_score": [
                    "Average confidence score",
                    "85.88%"
                ],
                "depends_on": [
                    "Depends on",
                    "Model and Data"
                ]
            },
            "clique_method": {
                "non_computable": [
                    "Non Computable Because",
                    "Can only be calculated on Tree-Based models."
                ]
            },
            "loss_sensitivity": {
                "non_computable": [
                    "Non Computable Because",
                    "Can only be calculated on Keras models."
                ]
            },
            "clever_score": {
                "non_computable": [
                    "Non Computable Because",
                    "Can only be calculated on Keras models."
                ]
            },
            "er_fast_gradient_attack": {
                "non_computable": [
                    "Non Computable Because",
                    "Can be calculated on either SVC or Logistic Regression models."
                ]
            },
            "er_carlini_wagner_attack": {
                "non_computable": [
                    "Non Computable Because",
                    "Can be calculated on either SVC or Logistic Regression models."
                ]
            },
            "er_deepfool_attack": {
                "non_computable": [
                    "Non Computable Because",
                    "Can be calculated on either SVC or Logistic Regression models."
                ]
            }
        },
        "accountability": {
            "normalization": {
                "dep": [
                    "Depends on",
                    "Training and Testing Data"
                ],
                "Training_mean": [
                    "Mean of the training data",
                    "11113.19"
                ],
                "Training_std": [
                    "Standard deviation of the training data",
                    "3934.44"
                ],
                "Test_mean": [
                    "Mean of the test data",
                    "10948.62"
                ],
                "Test_std": [
                    "Standard deviation of the test data",
                    "3866.66"
                ],
                "normalization": [
                    "Normalization",
                    "None"
                ]
            },
            "missing_data": {
                "dep": [
                    "Depends on",
                    "Training Data"
                ],
                "null_values": [
                    "Number of the null values",
                    "0"
                ]
            },
            "regularization": {
                "dep": [
                    "Depends on",
                    "Factsheet"
                ],
                "regularization_technique": [
                    "Regularization technique",
                    "Other"
                ]
            },
            "train_test_split": {
                "dep": [
                    "Depends on",
                    "Training and Testing Data"
                ],
                "train_test_split": [
                    "Train test split",
                    "85.00/15.00"
                ]
            },
            "factsheet_completeness": {
                "dep": [
                    "Depends on",
                    "Factsheet"
                ],
                "model_name": [
                    "Factsheet Property model name",
                    "present"
                ],
                "purpose_description": [
                    "Factsheet Property purpose description",
                    "present"
                ],
                "domain_description": [
                    "Factsheet Property domain description",
                    "present"
                ],
                "training_data_description": [
                    "Factsheet Property training data description",
                    "present"
                ],
                "model_information": [
                    "Factsheet Property model information",
                    "present"
                ],
                "target_column": [
                    "Factsheet Property target column",
                    "present"
                ],
                "authors": [
                    "Factsheet Property authors",
                    "present"
                ],
                "contact_information": [
                    "Factsheet Property contact information",
                    "present"
                ]
            }
        }
    }
}